generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String
  description    String
  msrpPrice      Float
  currentPrice   Float             @default(0.0)
  onSale         Boolean           @default(false)
  brand          String
  model          String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  archived       Boolean           @default(false)
  isSingleSize   Boolean           @default(false)
  quantity       Int?              @default(0)
  images         ProductImage[]
  variants       ProductVariant[]
  reviews        Review[]
  inventory      Inventory[]
  sales          Sale[]            @relation("ProductSales")
  categories     Category[]        @relation("ProductCategories")
  subcategories  SubCategory[]     @relation("ProductSubCategories")
  packages       Package[]         @relation("ProductPackages")
  cartItems      CartItem[]
  sizes          Size[]
}


model ProductVariant {
  id             Int              @id @default(autoincrement())
  name           String
  msrpPrice      Float
  currentPrice   Float             @default(0.0)
  productId      Int
  product        Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  isSingleSize   Boolean           @default(false)
  quantity       Int?
  sizes          Size[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  archived       Boolean           @default(false)
  images         ProductImage[]
  sales          Sale[]            @relation("VariantSales")
  cartItems      CartItem[]
  inventory      Inventory[]
}

model Size {
  id             Int              @id @default(autoincrement())
  size           String
  quantity       Int
  productId      Int?
  product        Product?          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productName    String?
  variantId      Int?
  variant        ProductVariant?   @relation(fields: [variantId], references: [id], onDelete: Cascade)
  variantName    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now())
  archived       Boolean           @default(false)
  cartItems      CartItem[]        // Add this back-reference
  inventories    Inventory[]       // Add this back-reference
}

model ProductImage {
  id             Int              @id @default(autoincrement())
  url            String
  order          Int
  productVariantId Int?
  productVariant ProductVariant?   @relation(fields: [productVariantId], references: [id], onDelete: Cascade)
  productId      Int?
  product        Product?          @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now())
  archived       Boolean           @default(false)
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[] @relation("ProductCategories")
  subcategories SubCategory[]
}


model SubCategory {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  categoryId     Int
  category       Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products       Product[]         @relation("ProductSubCategories")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  password       String
  name           String?
  address1       String?
  address2       String?
  phoneNumber    String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now())
  archived       Boolean           @default(false)
  cart           Cart?
}

model OrderItem {
  id                 Int              @id @default(autoincrement())
  orderId            Int
  order              Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId          Int?
  productName        String           // Store product name
  productVariantId   Int?
  productVariantName String?          // Store product variant name (optional)
  quantity           Int
  price              Float
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @default(now())
  archived           Boolean           @default(false)
}

model Order {
  id               Int              @id @default(autoincrement())
  userId           Int?             
  userName         String?          
  userEmail        String?          
  userAddress1     String?          
  userAddress2     String?          
  userPhoneNumber  String?         
  totalAmount      Float
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())
  archived         Boolean           @default(false)
  orderItems       OrderItem[]
}

model Review {
  id             Int              @id @default(autoincrement())
  userName       String
  userEmail      String
  userId         Int?
  productId      Int
  product        Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating         Float
  comment        String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now())
  archived       Boolean           @default(false)
}

model Cart {
  id             Int              @id @default(autoincrement())
  userId         Int              @unique
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  items          CartItem[]
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now())
}

model CartItem {
  id             Int              @id @default(autoincrement())
  cartId         Int
  cart           Cart             @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId      Int
  product        Product          @relation(fields: [productId], references: [id])
  variantId      Int?
  variant        ProductVariant?  @relation(fields: [variantId], references: [id])
  sizeId         Int?
  size           Size?            @relation(fields: [sizeId], references: [id])
  cartQuantity   Int
  currentPrice   Float
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @default(now())
}

model Inventory {
  id          Int              @id @default(autoincrement())
  productId   Int?
  product     Product?         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variantId   Int?
  variant     ProductVariant?  @relation(fields: [variantId], references: [id], onDelete: Cascade)
  sizeId      Int?
  size        Size?            @relation(fields: [sizeId], references: [id])
  quantity    Int
  updatedAt   DateTime         @default(now())
}

model Sale {
  id             Int              @id @default(autoincrement())
  name           String
  title          String
  tagline        String
  startDate      DateTime
  endDate        DateTime
  salePercentage Float?
  saleAmount     Float?
  archived       Boolean           @default(false)
  products       Product[]         @relation("ProductSales")
  variants       ProductVariant[]  @relation("VariantSales")
  promoCodes     PromoCode[]
}

model PromoCode {
  id             Int              @id @default(autoincrement())
  code           String           @unique
  validFrom      DateTime
  validTo        DateTime
  saleId         Int
  sale           Sale             @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

model Package {
  id             Int              @id @default(autoincrement())
  name           String
  description    String?
  price          Float
  products       Product[]         @relation("ProductPackages")
}
